#pragma checksum "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\TicTacToe.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "497736bcb26e97dd0b1e6fb160dba3f0deb5483f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Homepage.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\TicTacToe.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\TicTacToe.razor"
using Homepage.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\TicTacToe.razor"
using CommonLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\TicTacToe.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    public partial class TicTacToe : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 82 "C:\Users\jonte\Desktop\Sprint 4\arena-master\ArenaSolution\Homepage\Pages\TicTacToe.razor"
 
    private string[] Board;
    private bool gameOver = false;
    HubConnection connection;
    private string Message = null;
    string playerWon = null;
    bool startGame = false;
    bool gameJoined = false;

    protected async override Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
        .WithUrl("https://localhost:44377/gamehub")
        .Build();
        connection.On<string[]>("GameState", GameState);
        connection.On<string>("SetConnectionId", SetConnectionId);
        connection.On<string>("NotifyUser", NotifyUser);
        connection.On<string, string[]>("AnnounceGameOver", AnnounceGameOver);
        connection.On<string>("BackToGames", BackToGames);
        await connection.StartAsync();
    }

    void HideMessage()
    {
        Message = null;
        StateHasChanged();
    }

    async void JoinGame()
    {
        var player = sessionHelper.GetSessionUser(httpContextAccessor.HttpContext) as Player;
        Message = null;
        gameJoined = true;
        player.CurrentGameType = "TicTacToe";
        await connection.InvokeAsync("OnPlayerReceived", player);
    }

    async void Forfeit()
    {
        await connection.InvokeAsync("OnGameOver", "forfeit");
    }

    async void EndGame()
    {
        await connection.InvokeAsync("OnGameOver", "endgame");
    }

    Task BackToGames(string message)
    {
        Message = message;
        startGame = false;
        gameJoined = false;
        Player player = sessionHelper.GetSessionUser(httpContextAccessor.HttpContext) as Player;
        player.CurrentGameType = null;
        player.ConnectionId = null;
        sessionHelper.SetSessionUser(httpContextAccessor.HttpContext, player);
        connection.StopAsync();
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task GameState(string[] board)
    {
        if (board != null)
        {
            startGame = true;
            Board = board;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    Task SetConnectionId(string Id)
    {
        Player player = sessionHelper.GetSessionUser(httpContextAccessor.HttpContext) as Player;
        player.ConnectionId = Id;
        sessionHelper.SetSessionUser(httpContextAccessor.HttpContext, player);
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task NotifyUser(string message)
    {
        Message = message;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task AnnounceGameOver(string message, string[] board)
    {
        Board = board;
        if (message == "Draw")
        {
            Message = "It's a draw";
        }
        else
        {
            Message = string.Concat(message, " won!");
        }
        gameOver = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnSelect(int index)
    {
        if (!gameOver)
        {
            Message = null;
            await connection.InvokeAsync("OnUserMoveReceived", index);
        }
    }

    private string ShowBoard(int index)
    {
        return Board[index];
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SessionHelper sessionHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpContextAccessor httpContextAccessor { get; set; }
    }
}
#pragma warning restore 1591
